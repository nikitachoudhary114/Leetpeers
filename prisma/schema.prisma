// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  username  String?  @unique
  password  String? // optional for OAuth users
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  leetcodeProfile String? @unique
  bio             String?
  avatarUrl       String?
  githubProfile   String?
  linkedinProfile String?
  country         String?
  streakCount     Int     @default(0)
  problemsSolved  Int     @default(0)

  rooms      Room[]    @relation("RoomPlayers")
  ownedRooms Room[]    @relation("RoomOwner")
  Account    Account[]
  Session    Session[]
}

model Room {
  id        String   @id @default(cuid())
  name      String?
  code      String   @unique // random room code
  createdAt DateTime @default(now())

  ownerId String
  owner   User   @relation("RoomOwner", fields: [ownerId], references: [id])

  players User[] @relation("RoomPlayers")
}

// NextAuth tables
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
